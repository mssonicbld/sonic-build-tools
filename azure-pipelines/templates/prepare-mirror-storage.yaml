parameters:
- name: 'storageAccount'
  type: string
- name: 'storageAccountSasToken'
  type: string
- name: 'storageAccountReplica'
  type: string
- name: 'storageAccountReplicaSasToken'
  type: string
- name: 'mirrorName'
  type: string
- name: 'publishToReplica'
  type: string
  default: 'n'
- name: 'workspace'
  type: string
  default: 'work'
steps:
- bash: |
    # Mount storage containers for debian mirrors
    WORKSPACE=${{ parameters.workspace }}
    if [ -z "$StorageAccount" ]; then
      echo "The stroage account not set" 1>&2
      exit 1
    fi
    echo 'Mount storage container aptly for debian mirrors'
    BLOBFUSE_APTLY_PATH=/blobfuse-${StorageAccount}-aptly
    
    if ! mount | grep -q "$BLOBFUSE_APTLY_PATH"; then
      if [ ! -e $BLOBFUSE_APTLY_PATH ]; then
         sudo mkdir -p "$BLOBFUSE_APTLY_PATH"
         sudo chmod a+rw "$BLOBFUSE_APTLY_PATH"
      fi
      export AZURE_STORAGE_ACCOUNT="$StorageAccount"
      export AZURE_STORAGE_SAS_TOKEN="$StorageAccountSasToken"
      echo "$StorageAccount" > sas.key
      echo "$StorageAccountSasToken" >> sas.key
      echo "AZURE_STORAGE_SAS_TOKEN=$AZURE_STORAGE_SAS_TOKEN" >> sas.key
      sudo -E blobfuse "$BLOBFUSE_APTLY_PATH" --container-name='aptly' --tmp-path=/data/blobfuse-${StorageAccount}-aptly -o attr_timeout=240 -o entry_timeout=240 -o negative_timeout=120 -o allow_other
    fi
    # Validate the mount results
    if ! mount | grep -q "$BLOBFUSE_APTLY_PATH"; then
      echo "Failed to mount $BLOBFUSE_APTLY_PATH" 1>&2
      exit 1
    fi

    mkdir -p "$WORKSPACE"
    APTLY_PATH=$WORKSPACE/aptly
    APTLY_POOL_PATH=$WORKSPACE/pool
    mkdir -p "$BLOBFUSE_APTLY_PATH"
    mkdir -p "$BLOBFUSE_APTLY_PATH/pool"
    ln -s "$BLOBFUSE_APTLY_PATH/dbs" "$APTLY_PATH"
    ln -s "$BLOBFUSE_APTLY_PATH/pool" "$APTLY_POOL_PATH"
    echo 'The mount storage container aptly is complete'
  env:
    StorageAccount: $(StorageAccount)
    StorageAccountSasToken: $(StorageAccountSasToken)
  displayName: 'Run mount stroage container to load aptly db and pool script'
- bash: |
    # Mount the publish contianers for debian mirrors
    WORKSPACE=${{ parameters.workspace }}
    PUBLISH_PATH=$WORKSPACE/publish
    if [ -z "$StorageAccount" ]; then
      echo "The stroage account not set" 1>&2
      exit 1
    fi
    echo 'Mount storage containers for debian mirrors'
    BLOBFUSE_WEB_PATH=/blobfuse-${StorageAccount}-web
    if ! mount | grep -q "$BLOBFUSE_WEB_PATH"; then
      if [ ! -e $BLOBFUSE_APTLY_PATH ]; then 
        sudo mkdir -p $BLOBFUSE_APTLY_PATH
        sudo chmod a+rw $BLOBFUSE_APTLY_PATH
      fi
      export AZURE_STORAGE_ACCOUNT="$StorageAccount"
      export AZURE_STORAGE_SAS_TOKEN="$StorageAccountSasToken"
      sudo -E blobfuse "$BLOBFUSE_WEB_PATH" --container-name='$web' --tmp-path=/data/blobfuse-${StorageAccount}-web -o attr_timeout=240 -o entry_timeout=240 -o negative_timeout=120 -o allow_other
      sleep 1
    fi
    # Validate the mount results
    if ! mount | grep -q "$BLOBFUSE_WEB_PATH"; then
      echo "Failed to mount $BLOBFUSE_WEB_PATH" 1>&2
      exit 1
    fi

    mkdir -p $BLOBFUSE_WEB_PATH/debian
    ln -s $BLOBFUSE_WEB_PATH/debian $PUBLISH_PATH
    echo 'The mount storage container web is complete'
    exit 1
  env:
    ${{ if eq(variables['PublishToReplica'], 'n') }}:
      StorageAccount: $(StorageAccount)
      StorageAccountSasToken: $(StorageAccountSasToken)
    ${{ if ne(variables[''], 'n') }}:
      StorageAccount: $(StorageAccountReplica)
      StorageAccountSasToken: $(StorageAccountReplicaSasToken)
    
  displayName: 'Run mount stroage container to publish mirror script'
