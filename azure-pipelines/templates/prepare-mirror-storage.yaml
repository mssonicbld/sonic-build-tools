parameters:
- name: 'storageAccount'
  type: string
- name: 'storageAccountSasToken'
  type: string
- name: 'storageAccountReplica'
  type: string
- name: 'storageAccountReplicaSasToken'
  type: string
- name: 'mirrorName'
  type: string
- name: 'publishToReplica'
  type: string
  default: 'n'
- name: 'workspace'
  type: string
  default: 'work'
- name: 'enableNfs'
  type: string
  default: 'n'
steps:
- bash: |
    # Mount NFS for the aptly db and pool of debian mirrors
    EnableNFS=${{ parameters.enableNfs }}
    WORKSPACE=${{ parameters.workspace }}
    MIRROR_NAME=${{ parameters.mirrorName }}
    NFS_VOLUMN=$(NFSVolumn)
    NFS_MOUNT_POINT=/nfs_aptly
    sudo mkdir -p $NFS_MOUNT_POINT
    if [ "$EnableNFS" != "y" ]; then
      echo "Skip to mount nfs, EnableNFS=$EnableNFS"
      exit 0
    fi
    if ! grep -q "$NFS_MOUNT_POINT" /etf/fstab; then
      sudo mkdir $NFS_MOUNT_POINT
      sudo chmod 777 $NFS_MOUNT_POINT
      echo "$NFS_VOLUMN	$NFS_MOUNT_POINT    nfs     rw,rsize=1048576,wsize=1048576,vers=4.1,tcp,nosuid       0       0" | sudo tee -a /etc/fstab
      sudo mount -a
    fi

    if ! mount | grep -q "$NFS_MOUNT_POINT"; then
      echo "Failed to mount $NFS_MOUNT_POINT" 1>&2
      exit 1
    fi

    # Validate the permission
    if ! touch $NFS_MOUNT_POINT/_tmp; then
      echo "Failed to create $NFS_MOUNT_POINT/_tmp" 1>&2
      exit 1
    fi
    if ! rm $NFS_MOUNT_POINT/_tmp; then
      echo "failed to remove $NFS_MOUNT_POINT/_tmp" 1>&2
      exit 1
    if

    rm -rf "$WORKSPACE"
    mkdir -p "$WORKSPACE"
    APTLY_POOL_PATH=$WORKSPACE/pool
    NFS_MIRROR_PATH=$NFS_MOUNT_POINT/$MIRROR_NAME
    echo "pwd=$(pwd)"
    echo "APTLY_POOL_PATH=$APTLY_POOL_PATH"
    mkdir -p "$NFS_MIRROR_PATH/pool"
    ln -s $NFS_MIRROR_PATH/pool $APTLY_POOL_PATH
    echo 'The mount nfs aptly pool is complete'
  displayName: 'Run mount NFS to load aptly db pool script'
- bash: |
    # Mount storage containers for the aptly db and/or pool of debian mirrors
    WORKSPACE=${{ parameters.workspace }}
    MIRROR_NAME=${{ parameters.mirrorName }}
    if [ -z "$StorageAccount" ]; then
      echo "The stroage account not set" 1>&2
      exit 1
    fi
    if [ -z "$MIRROR_NAME" ]; then
      echo "The mirror name not set" 1>&2
      exit 1
    fi
    echo 'Mount storage container aptly for debian mirrors'
    BLOBFUSE_APTLY_PATH=/blobfuse-${StorageAccount}-aptly
    
    if ! mount | grep -q "$BLOBFUSE_APTLY_PATH"; then
      if [ ! -e $BLOBFUSE_APTLY_PATH ]; then
         sudo mkdir -p "$BLOBFUSE_APTLY_PATH"
         sudo chmod a+rw "$BLOBFUSE_APTLY_PATH"
      fi
      export AZURE_STORAGE_ACCOUNT="$StorageAccount"
      export AZURE_STORAGE_SAS_TOKEN="$StorageAccountSasToken"
      sudo -E blobfuse "$BLOBFUSE_APTLY_PATH" --container-name='aptly' --tmp-path=/data/blobfuse-${StorageAccount}-aptly -o attr_timeout=240 -o entry_timeout=240 -o negative_timeout=120 -o allow_other
    fi
    # Validate the mount results
    if ! mount | grep -q "$BLOBFUSE_APTLY_PATH"; then
      echo "Failed to mount $BLOBFUSE_APTLY_PATH" 1>&2
      exit 1
    fi

    rm -rf "$WORKSPACE"
    mkdir -p "$WORKSPACE"
    APTLY_PATH=$WORKSPACE/aptly
    APTLY_POOL_PATH=$WORKSPACE/pool
    BLOBFUSE_MIRROR_PATH=$BLOBFUSE_APTLY_PATH/$MIRROR_NAME
    [ "$EnableNFS" == "y" ] && BLOBFUSE_MIRROR_PATH=$BLOBFUSE_APTLY_PATH/$MIRROR_NAME/nfs
    echo "pwd=$(pwd)"
    echo "APTLY_PATH=$APTLY_PATH"
    echo "APTLY_POOL_PATH=$APTLY_POOL_PATH"
    mkdir -p "$BLOBFUSE_MIRROR_PATH/pool"
    echo "ln -s $BLOBFUSE_MIRROR_PATH $APTLY_PATH"
    ln -s $BLOBFUSE_MIRROR_PATH $APTLY_PATH
    if [ "$EnableNFS" != "y" ]; then
      echo "Mount Aptly pool, EnableNFS=$EnableNFS"
      echo "ln -s $BLOBFUSE_MIRROR_PATH/pool $APTLY_POOL_PATH"
      ln -s $BLOBFUSE_MIRROR_PATH/pool $APTLY_POOL_PATH
    fi
    echo 'The mount storage container aptly is complete'
  env:
    StorageAccount: $(StorageAccount)
    StorageAccountSasToken: $(StorageAccountSasToken)
  displayName: 'Run mount stroage container to load aptly db and pool (if nfs not enabled) script'
- bash: |
    # Mount the publish contianers for debian mirrors
    WORKSPACE=${{ parameters.workspace }}
    PUBLISH_PATH=$WORKSPACE/publish
    PublishToReplica=$(PublishToReplica)
    if [ "$PublishToReplica" == "y" ]; then
        StorageAccount=$StorageAccountReplica
        StorageAccountSasToken=$StorageAccountReplicaSasToken
    fi
    if [ -z "$StorageAccount" ]; then
      echo "The stroage account not set" 1>&2
      exit 1
    fi
    echo 'Mount storage containers for debian mirrors'
    BLOBFUSE_WEB_PATH=/blobfuse-${StorageAccount}-web
    if ! mount | grep -q "$BLOBFUSE_WEB_PATH"; then
      if [ ! -e $BLOBFUSE_WEB_PATH ]; then 
        sudo mkdir -p $BLOBFUSE_WEB_PATH
        sudo chmod a+rw $BLOBFUSE_WEB_PATH
      fi
      export AZURE_STORAGE_ACCOUNT="$StorageAccount"
      export AZURE_STORAGE_SAS_TOKEN="$StorageAccountSasToken"
      sudo -E blobfuse "$BLOBFUSE_WEB_PATH" --container-name='$web' --tmp-path=/data/blobfuse-${StorageAccount}-web -o attr_timeout=240 -o entry_timeout=240 -o negative_timeout=120 -o allow_other
      sleep 1
    fi
    # Validate the mount results
    if ! mount | grep -q "$BLOBFUSE_WEB_PATH"; then
      echo "Failed to mount $BLOBFUSE_WEB_PATH" 1>&2
      exit 1
    fi

    mkdir -p $BLOBFUSE_WEB_PATH/debian
    ln -s $BLOBFUSE_WEB_PATH/debian $PUBLISH_PATH
    echo 'The mount storage container web is complete'
  env:
    StorageAccount: $(StorageAccount)
    StorageAccountSasToken: $(StorageAccountSasToken)
    StorageAccountReplica: $(StorageAccountReplica)
    StorageAccountReplicaSasToken: $(StorageAccountReplicaSasToken)
    
  displayName: 'Run mount stroage container to publish mirror script'
