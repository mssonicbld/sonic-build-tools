stages:
- stage: InitStage
  jobs:
  - job: InitJob
    steps:
    - template: debian-mirror-init.yml
- stage: PublishToReplicaStage
  dependsOn: InitStage
  variables:
    PublishToReplica: y
    MIRROR_VERSION: $[ stageDependencies.InitStage.InitJob.outputs['InitStep.MirrorVersion'] ]
  jobs:
  - template: debian-mirror-jobs-publish-mirror.yml
    parameters:
      publishToReplica: y
- stage: MigrateReplicaStage
  dependsOn:
  - InitStage
  - PublishToReplicaStage
  condition: succeeded()
  variables:
    PublishToReplica: n
    UpdateMirror: y
  jobs:
  - job: MigrateReplica
    steps:
    - script: echo skip
    - template: ../templates/debian-mirror-migrate-replica.yml
- stage: PublishToPrimaryStage
  dependsOn:
  - InitStage
  - MigrateReplicaStage
  condition: and(succeeded(), eq(stageDependencies.MigrateReplicaStage.outputs['MigrateReplica.CheckVersion.MigrateCdnReplica'], 'y'))
  variables:
    PublishToReplica: n
    MIRROR_VERSION: $[ stageDependencies.InitStage.InitJob.outputs['InitStep.MirrorVersion'] ]
  jobs:
  - template: debian-mirror-jobs-publish-mirror.yml
    parameters:
      publishToReplica: n
- stage: MigratePrimaryStage
  dependsOn:
  - MigrateReplicaStage
  - PublishToPrimaryStage
  condition: and(succeeded(), eq(stageDependencies.MigrateReplicaStage.outputs['MigrateReplica.CheckVersion.MigrateCdnReplica'], 'y'))
  variables:
    PublishToReplica: n
    MigrateCdnReplica: y
    UpdateMirror: n
  jobs:
  - job: MigratePrimary
    steps:
    - template: ../templates/debian-mirror-migrate-primary.yml
- stage: CleanUp
  condition: always()
  jobs:
  - job: CleanUp
    steps:
    - template: ../templates/debian-mirror-cleanup.yml
