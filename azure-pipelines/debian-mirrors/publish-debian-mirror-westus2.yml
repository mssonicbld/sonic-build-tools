# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool: sonic-mirror-build
variables:
- group: SONiC-Azure-Key-Vault
- group: SONiC-Mirror-US-West2-1
- group: Debian-Mirror-Common
- name: EnableNfs
  value: 'y'
- name: PublishToReplica
  value: 'y'
- name: StorageAccount
  value: 'sonicstoragepublic0'
- name: StorageAccountSasToken
  value: $(sonicstoragepublic0-SasToken)
- name: StorageAccountReplica
  value: 'sonicstoragepublic1'
- name: StorageAccountReplicaSasToken
  value: $(sonicstoragepublic1-SasToken)
stages:
- stage: InitStage
  jobs:
  - job: InitJob
    steps:
    - template: ../templates/debian-mirror-init.yml
- stage: PublishToReplicaStage
  dependsOn: InitStage
  variables:
  - name: MirrorVersion
    value: $[ stageDependencies.InitStage.InitJob.outputs['InitStep.MirrorVersion'] ]
  - name: PublishToReplica
    value: 'y'
  - name: UpdateMirror
    value: 'y'
  jobs:
  - template: ../templates/debian-mirror-publish-mirrors.yml
- stage: MigrateReplicaStage
  dependsOn:
  - InitStage
  - PublishToReplicaStage
  condition: succeeded()
  variables:
  - name: MirrorVersion
    value: $[ stageDependencies.InitStage.InitJob.outputs['InitStep.MirrorVersion'] ]
  - name: PublishToReplica
    value: 'n'
  jobs:
  - job: MigrateReplica
    steps:
    - template: ../templates/debian-mirror-migrate-replica.yml
- stage: PublishToPrimaryStage
  dependsOn:
  - InitStage
  - MigrateReplicaStage
  condition: and(succeeded(), eq(stageDependencies.MigrateReplicaStage.outputs['MigrateReplica.CheckVersion.MigrateCdnReplica'], 'y'))
  variables:
  - name: PublishToReplica
    value: 'n'
  - name: UpdateMirror
    value: 'n'
  jobs:
  - template: ../templates/debian-mirror-publish-mirrors.yml
- stage: Test
  dependsOn:
  - MigrateReplicaStage
  variables:
  - name: PublishToReplica
    value: 'n'
  - name: MigrateCdnReplica
    value: $[ stageDependencies.MigrateReplicaStage.MigrateReplica.outputs['CheckVersion.MigrateCdnReplica'] ]
  jobs:
  - job: TestOnly
    steps:
    - bash: |
        echo "MigrateCdnReplica=$(MigrateCdnReplica)"
- stage: MigratePrimaryStage
  dependsOn:
  - MigrateReplicaStage
  - PublishToPrimaryStage
  condition: and(succeeded(), eq(stageDependencies.MigrateReplicaStage.outputs['MigrateReplica.CheckVersion.MigrateCdnReplica'], 'y'))
  variables:
  - name: PublishToReplica
    value: 'n'
  - name: MigrateCdnReplica
    value: 'y'
  jobs:
  - job: MigratePrimary
    steps:
    - template: ../templates/debian-mirror-migrate-primary.yml
- stage: CleanUp
  condition: always()
  jobs:
  - job: CleanUp
    steps:
    - bash: |
        [ -d work/_aptly/.lockdir ] && rm -rf work/_aptly/.lockdir
      displayName: 'CleanUp'
