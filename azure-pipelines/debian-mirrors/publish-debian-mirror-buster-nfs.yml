# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool: sonic-mirror-build-2
variables:
- group: Debian-Mirror-GPG-VG
- group: Debian-Mirror-Storage-US-East-2
- group: Debian-Mirror-Common
- name: EnableNfs
  value: 'y'
- name: PublishToReplica
  value: 'y'
stages:
- stage: InitStage
  jobs:
  - job: InitJob
    steps:
    - template: ../templates/debian-mirror-init.yml
- stage: PublishToReplicaStage
  dependsOn: InitStage
  variables:
  - name: MirrorVersion
    value: $[ stageDependencies.InitStage.InitJob.outputs['InitStep.MirrorVersion'] ]
  - name: PublishToReplica
    value: 'y'
  - name: UpdateMirror
    value: 'y'
  jobs:
  - template: ../templates/debian-mirror-publish-mirrors.yml
- stage: MigrateReplicaStage
  dependsOn:
  - InitStage
  - PublishToReplicaStage
  variables:
  - name: MirrorVersion
    value: $[ stageDependencies.InitStage.InitJob.outputs['InitStep.MirrorVersion'] ]
  jobs:
  - job: Test
    steps:
    - bash: |
        echo "MirrorVersion=$MirrorVersion"
      displayName: 'Test'
- stage: PublishToPrimaryStage
  dependsOn:
  - InitStage
  - MigrateReplicaStage
  variables:
  - name: MirrorVersion
    value: $[ stageDependencies.InitStage.InitJob.outputs['InitStep.MirrorVersion'] ]
  - name: PublishToReplica
    value: 'n'
  - name: UpdateMirror
    value: 'n'
  jobs:
  - template: ../templates/debian-mirror-publish-mirrors.yml
- stage: MigratePrimaryStage
  dependsOn:
  - InitStage
  - PublishToPrimaryStage
  variables:
  - name: PublishToReplica
    value: 'n'
  - name: MirrorVersion
    value: $[ stageDependencies.InitStage.InitJob.outputs['InitStep.MirrorVersion'] ]
  jobs:
  - job: Test
    steps:
    - bash: |
        echo "MirrorVersion=$MirrorVersion"
- stage: CleanUp
  condition: always()
  jobs:
  - job: CleanUp
    steps:
    - bash: |
        [ -d work/_aptly/.lockdir ] && rm -rf work/_aptly/.lockdir
      displayName: 'CleanUp'