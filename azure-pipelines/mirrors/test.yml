# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool: sonic-mirror-build-2
variables:
- group: SONiC-Azure-Key-Vault
- group: Debian-Mirror-Common
- group: SONiC-Mirror-US-East-1 
- name: StorageAccount
  value: 'sonicstoragepublic2'
- name: StorageAccountSasToken
  value: $(sonicstoragepublic2-SasToken)
- name: StorageAccountReplica
  value: 'sonicstoragepublic3'
- name: StorageAccountReplicaSasToken
  value: $(sonicstoragepublic3-SasToken)

stages:
- stage: test
  jobs:
  - job: Test
    steps:
    - script: |
        sudo rm -rf *
        sudo rm -rf \.??*
      displayName: 'cleanup'
    - script: |
        # TODO: Move to vmss extension
        if [ -z "$(which gh)" ]; then
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
          sudo apt-add-repository https://cli.github.com/packages
          sudo apt update
          sudo apt install gh
        fi
      displayName: 'Install gh'
    - checkout: self
      displayName: 'Checkout code'
    - script: |
        echo RepoName=$(Build.Repository.Name)
        echo SourceBranchName=$(Build.SourceBranchName)
        mkdir -p files/build/versions
        echo 123 > files/build/versions/versions-test
    - script: |
        if [ -z "$GIT_USER" ]; then
          echo "Skipped to send the pull request, GIT_USER not set."
          exit 0
        fi
        BRANCH_NAME=repd/versions/$(Build.SourceBranchName)
        echo '#!/bin/bash' > git_env_password.sh
        echo 'echo $GIT_PASSWORD' >> git_env_password.sh
        chmod a+x git_env_password.sh
        export GIT_ASKPASS=./git_env_password.sh

        git config user.name $GIT_USER
        git config credential.https://github.com.username $GIT_USER
        git add files/build/versions
        git commit -m "Update SONiC version files"
        [ -z "$GIT_REPO" ] && GIT_REPO=$(Build.SourceBranchName)
        git checkout -b $BRANCH_NAME
        git remote add remote https://github.com/$GIT_USER/$GIT_REPO
        git push remote HEAD:refs/heads/$BRANCH_NAME -f
        git branch -u remote/$BRANCH_NAME

        UPGRADE_TAG="Auto-Version-Upgrade"
        rm -f ~/.config/gh/hosts.yml
        echo $GIT_PASSWORD > GIT_PASSWORD
        echo $GIT_PASSWORD | gh auth login --with-token
        echo "login"
        OLD_PRS=$(gh pr list -B $(Build.SourceBranchName) -R $(Build.Repository.Name) -l "$UPGRADE_TAG" | cut -d$'\t' -f1)
        for number in $OLD_PRS; do
          gh pr close $number
        done
        echo gh pr create -l "$UPGRADE_TAG" --title "Upgrade SONiC Versions" --body "Upgrade SONiC Versions" -B $(Build.SourceBranchName) -R $(Build.Repository.Name)
        gh pr create -l "$UPGRADE_TAG" --title "Upgrade SONiC Versions" --body "Upgrade SONiC Versions" -B $(Build.SourceBranchName) -R $(Build.Repository.Name)
      env:
        GIT_USER: $(GIT_USER)
        GIT_PASSWORD: $(GIT_PASSWORD)
      displayName: 'Send Pull Request'
  - template: ../templates/jobs-template-test.yml
    parameters:
      jobVariables:
        MIRROR_COMPONENTS: 'contrib,non-free,main'
        MIRROR_ARICHTECTURES: 'amd64,armhf,arm64'
      preSteps:
      - script: |
          echo "StorageAccountReplica=$(StorageAccountReplica)"
          echo "StorageAccount=$(StorageAccount)"
          echo "MIRROR_FILESYSTEM=$MIRROR_FILESYSTEM"
          echo "MIRROR_URL=$MIRROR_URL"
          echo "MIRROR_DISTRIBUTIONS=$MIRROR_DISTRIBUTIONS"
          echo "MIRROR_COMPONENTS=$MIRROR_COMPONENTS"
          echo "MIRROR_ARICHTECTURES=$MIRROR_ARICHTECTURES"
          echo "MIRROR_VERSION=$MIRROR_VERSION"
          echo "GROUP_NAME=$GROUP_NAME"
          echo "GROUP_NAMES=$GROUP_NAMES"
          echo "UpdateMirror=$(UpdateMirror)"
          echo "$GROUP_NAMES" > work/_aptly/mirror_names
        displayName: 'Print Parameters'
      - script: |
          echo "UPDATE_MIRROR=$UPDATE_MIRROR"
        env:
          PASSPHRASE: $(sonic-gpg-passphrase)
          GPG_KEY: $(sonic-gpg-enc-private-key)
          UPDATE_MIRROR: $(UpdateMirror)
          GPG_PUBLIC_KEY2: $(sonic-gpg-public-key-2)
        name: publish
        displayName: 'Publish Mirror'
      jobGroups:
      - name: jessie
        variables:
          MIRROR_FILESYSTEM: debian
          MIRROR_URL: 'http://deb.debian.org/debian'
          MIRROR_DISTRIBUTIONS: 'jessie,jessie-updates'
          MIRROR_ARICHTECTURES: 'amd64,armhf'
      - name: stretch
        extName: '_ext'
        dependsOn: jessie
        variables:
          MIRROR_FILESYSTEM: debian
          MIRROR_URL: 'http://deb.debian.org/debian'
          MIRROR_DISTRIBUTIONS: 'stretch,stretch-updates,stretch-backports'
    
